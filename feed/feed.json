{
	"version": "https://jsonfeed.org/version/1.1",
	"title": "arvidsson&#39;s notes",
	"language": "en",
	"home_page_url": "https://arvidsson.github.io/",
	"feed_url": "https://arvidsson.github.io/feed/feed.json",
	"description": "random notes on programming mostly",
	"author": {
		"name": "PÃ¤r Arvidsson",
		"url": "https://arvidsson.github.io/"
	},
	"items": [
		{
			"id": "https://arvidsson.github.io/notes/simple-singleton/",
			"url": "https://arvidsson.github.io/notes/simple-singleton/",
			"title": "Singletons in Unity",
			"content_html": "<p>This is an easy way to make a singleton object in Unity.</p>\n<p>I won't go into the pros and cons of Singletons in general and the discussion around if it's an antipattern or not. I have found it a good pattern to use in game programming when you want to easily access objects that should only really exist as a single instance and where you often need access from many other objects, such as manager objects (eg save system, sound system) or the object representing the player.</p>\n<pre class=\"language-csharp\" tabindex=\"0\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Singleton</span> Instance <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Awake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Instance <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> Instance <span class=\"token operator\">!=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">Destroy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        Instance <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// keep singleton alive between scenes</span>\n        <span class=\"token function\">DontDestroyOnLoad</span><span class=\"token punctuation\">(</span>gameObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n",
			"date_published": "2023-08-24T00:00:00Z"
		}
		
	]
}
